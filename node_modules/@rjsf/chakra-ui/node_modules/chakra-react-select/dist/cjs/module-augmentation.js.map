{"version":3,"file":"module-augmentation.js","names":[],"sources":["../../src/module-augmentation.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { SystemStyleObject } from \"@chakra-ui/system\";\nimport type { GroupBase } from \"react-select\";\nimport type {\n  ChakraStylesConfig,\n  SelectedOptionStyle,\n  Size,\n  TagVariant,\n} from \"./types\";\n\n/**\n * Module augmentation is used to add extra props to the existing interfaces\n * from `react-select` as per the docs\n *\n * @see {@link https://react-select.com/typescript#custom-select-props}\n */\n\ndeclare module \"react-select/dist/declarations/src/Select\" {\n  export interface Props<\n    Option,\n    IsMulti extends boolean,\n    Group extends GroupBase<Option>\n  > {\n    /**\n     * The size of the base control; matches the sizes of the chakra Input\n     * component with the exception of `xs`\n     *\n     * Options: `sm` | `md` | `lg`\n     *\n     * @defaultValue `md`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#size--options-sm-md-lg--default-md}\n     * @see {@link https://v1.chakra-ui.com/docs/form/input#changing-the-size-of-the-input}\n     */\n    size?: Size;\n\n    /**\n     * Determines whether or not to style the input with the invalid border\n     * color\n     *\n     * If the `aria-invalid` prop is not passed, this prop will also set that\n     *\n     * @defaultValue `false`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#isinvalid--default-false}\n     * @see {@link https://v1.chakra-ui.com/docs/form/input#props}\n     */\n    isInvalid?: boolean;\n\n    /**\n     * If `true`, the form control will be `readonly`\n     *\n     * @see {@link https://v1.chakra-ui.com/docs/components/form/input#props}\n     * @see {@link https://v1.chakra-ui.com/docs/components/form/form-control#props}\n     */\n    isReadOnly?: boolean;\n\n    /**\n     * If true, the form control will be required. This has 2 side effects:\n     * - The `FormLabel` will show a required indicator\n     * - The form element (e.g, Input) will have `aria-required` set to true\n     *\n     * @see {@link https://v1.chakra-ui.com/docs/components/form/input#props}\n     * @see {@link https://v1.chakra-ui.com/docs/components/form/form-control#props}\n     */\n    isRequired?: boolean;\n\n    /**\n     * A color name that matches a key from your chakra theme and will\n     * determine the color scheme of your `MultiValue` component\n     *\n     * The styling matches the chakra `Tag` component\n     *\n     * @defaultValue `\"gray\"`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#colorscheme}\n     * @see {@link https://v1.chakra-ui.com/docs/data-display/tag#props}\n     */\n    colorScheme?: string;\n\n    /**\n     * The `variant` prop that will be forwarded to your `MultiValue` component\n     * which is represented by a chakra `Tag`\n     *\n     * Options: \"subtle\" | \"solid\" | \"outline\"\n     *\n     * @defaultValue `subtle`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#tagvariant--options-subtle-solid-outline--default-subtle}\n     * @see {@link https://v1.chakra-ui.com/docs/data-display/tag#props}\n     */\n    tagVariant?: TagVariant;\n\n    /**\n     * Passing `true` for this prop will make the group headers\n     * `position: sticky` and keep them stuck to the top while their\n     * corresponding group is in view\n     *\n     * @defaultValue `false`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#hasstickygroupheaders--default-false}\n     */\n    hasStickyGroupHeaders?: boolean;\n\n    /**\n     * Whether to style a selected option by highlighting it in a solid color\n     * or adding a check mark next to it like the chakra `Menu` component\n     *\n     * Options: `color` | `check`\n     *\n     * @defaultValue `color`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#selectedoptionstyle--options-color-check--default-color}\n     * @see {@link https://v1.chakra-ui.com/docs/overlay/menu#menu-option-groups}\n     */\n    selectedOptionStyle?: SelectedOptionStyle;\n\n    /**\n     * The color scheme to style an option with when using the\n     * `selectedOptionStyle=\"color\"` prop.  Uses the `500` value in light mode\n     * and the `300` value in dark mode.\n     *\n     * @defaultValue `blue`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#selectedoptioncolor--default-blue}\n     */\n    selectedOptionColor?: string;\n\n    /**\n     * The color value to style the border of the `Control` with when the\n     * select is focused\n     *\n     * @defaultValue Light mode: `blue.500` | Dark mode: `blue.300`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#focusbordercolor--default-blue500--errorbordercolor--default-red500}\n     * @see {@link https://v1.chakra-ui.com/docs/form/input#changing-the-focus-and-error-border-colors}\n     */\n    focusBorderColor?: string;\n\n    /**\n     * The color value to style the border of the `Control` with when\n     * `isInvalid` is passed to the select\n     *\n     * @defaultValue Light mode: `red.500` | Dark mode: `red.300`\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#focusbordercolor--default-blue500--errorbordercolor--default-red500}\n     * @see {@link https://v1.chakra-ui.com/docs/form/input#changing-the-focus-and-error-border-colors}\n     */\n    errorBorderColor?: string;\n\n    /**\n     * The color used to style the text in the `Placeholder`, `LoadingMessage`,\n     * and `NoOptionsMessage`.\n     *\n     * @defaultValue Light mode: `gray.400` | Dark mode: `whiteAlpha.400`\n     * @see {@link https://github.com/chakra-ui/chakra-ui/blob/main/packages/theme/src/styles.ts#L13}\n     */\n    placeholderColor?: string;\n\n    /**\n     * Style transformation methods for each of the rendered components using,\n     * Chakra's `SystemStyleObject` and the props passed into each component\n     *\n     * @see {@link https://github.com/csandman/chakra-react-select/tree/v3#chakrastyles}\n     * @see {@link https://react-select.com/styles#style-object}\n     */\n    chakraStyles?: ChakraStylesConfig<Option, IsMulti, Group>;\n  }\n}\n\ndeclare module \"react-select/dist/declarations/src/components/MultiValue\" {\n  export interface MultiValueProps<\n    Option,\n    IsMulti extends boolean,\n    Group extends GroupBase<Option>\n  > {\n    sx: SystemStyleObject;\n  }\n\n  export interface MultiValueGenericProps<\n    Option,\n    IsMulti extends boolean,\n    Group extends GroupBase<Option>\n  > {\n    sx: SystemStyleObject;\n  }\n\n  export interface MultiValueRemoveProps<\n    Option,\n    IsMulti extends boolean,\n    Group extends GroupBase<Option>\n  > {\n    isFocused: boolean;\n    sx: SystemStyleObject;\n  }\n}\n\ndeclare module \"react-select/dist/declarations/src/components/indicators\" {\n  export interface LoadingIndicatorProps<\n    Option,\n    IsMulti extends boolean,\n    Group extends GroupBase<Option>\n  > {\n    /**\n     * The color of the filled in area of the spinner\n     *\n     * Defaults to your Chakra theme's text color\n     *\n     * @defaultValue Light mode: `gray.700` | Dark mode: `whiteAlpha.900`\n     */\n    color?: string;\n\n    /**\n     * The color of the empty area in the spinner\n     *\n     * @defaultValue `transparent`\n     * @see {@link https://v1.chakra-ui.com/docs/components/feedback/spinner#spinner-with-empty-area-color}\n     */\n    emptyColor?: string;\n\n    /**\n     * The size prop for the Chakra `<Spinner />` component.\n     *\n     * Defaults to one size smaller than the overall Select's size\n     *\n     * @see {@link https://v1.chakra-ui.com/docs/components/feedback/spinner#spinner-with-different-size}\n     */\n    spinnerSize?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n\n    /**\n     * The speed of the spinner represented by the time it takes to make one full rotation.\n     *\n     * This speed is represented by a [CSS `<time>`](https://developer.mozilla.org/en-US/docs/Web/CSS/time) variable which uses either seconds or milliseconds\n     *\n     * @defaultValue `0.45s`\n     * @example\n     * ```jsx\n     * <Spinner speed=\"0.2s\"/>\n     * ```\n     * @see {@link https://v1.chakra-ui.com/docs/components/feedback/spinner#props}\n     */\n    speed?: string;\n\n    /**\n     * The thickness of the spinner\n     *\n     * @defaultValue `2px`\n     * @example\n     * ```jsx\n     * <Spinner thickness=\"4px\"/>\n     * ```\n     * @see {@link https://v1.chakra-ui.com/docs/components/feedback/spinner#props}\n     */\n    thickness?: string;\n  }\n}\n"],"mappings":""}