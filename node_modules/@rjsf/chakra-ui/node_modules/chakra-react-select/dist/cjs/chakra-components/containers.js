"use strict";

exports.__esModule = true;
exports.ValueContainer = exports.SelectContainer = exports.IndicatorsContainer = void 0;

var _react = _interopRequireDefault(require("react"));

var _layout = require("@chakra-ui/layout");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var SelectContainer = function SelectContainer(props) {
  var children = props.children,
      className = props.className,
      cx = props.cx,
      innerProps = props.innerProps,
      isDisabled = props.isDisabled,
      isRtl = props.isRtl,
      hasValue = props.hasValue,
      chakraStyles = props.selectProps.chakraStyles;
  var initialStyles = {
    position: "relative",
    direction: isRtl ? "rtl" : undefined,
    // When disabled, react-select sets the pointer-state to none which prevents
    // the `not-allowed` cursor style from chakra from getting applied to the
    // Control when it is disabled
    pointerEvents: "auto"
  };
  var sx = chakraStyles != null && chakraStyles.container ? chakraStyles.container(initialStyles, props) : initialStyles;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      "--is-disabled": isDisabled,
      "--is-rtl": isRtl,
      "--has-value": hasValue
    }, className),
    sx: sx
  }), children);
};

exports.SelectContainer = SelectContainer;

var ValueContainer = function ValueContainer(props) {
  var children = props.children,
      className = props.className,
      cx = props.cx,
      isMulti = props.isMulti,
      hasValue = props.hasValue,
      innerProps = props.innerProps,
      _props$selectProps = props.selectProps,
      size = _props$selectProps.size,
      chakraStyles = _props$selectProps.chakraStyles;
  var px = {
    sm: "0.75rem",
    md: "1rem",
    lg: "1rem"
  };
  var initialStyles = {
    display: "flex",
    alignItems: "center",
    flex: 1,
    padding: "0.125rem " + px[size],
    flexWrap: "wrap",
    WebkitOverflowScrolling: "touch",
    position: "relative",
    overflow: "hidden"
  };
  var sx = chakraStyles != null && chakraStyles.valueContainer ? chakraStyles.valueContainer(initialStyles, props) : initialStyles;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      "value-container": true,
      "value-container--is-multi": isMulti,
      "value-container--has-value": hasValue
    }, className),
    sx: sx
  }), children);
};

exports.ValueContainer = ValueContainer;

var IndicatorsContainer = function IndicatorsContainer(props) {
  var children = props.children,
      className = props.className,
      cx = props.cx,
      chakraStyles = props.selectProps.chakraStyles;
  var initialStyles = {
    display: "flex",
    alignItems: "center",
    alignSelf: "stretch",
    flexShrink: 0
  };
  var sx = chakraStyles != null && chakraStyles.indicatorsContainer ? chakraStyles.indicatorsContainer(initialStyles, props) : initialStyles;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, {
    className: cx({
      indicators: true
    }, className),
    sx: sx
  }, children);
};

exports.IndicatorsContainer = IndicatorsContainer;
//# sourceMappingURL=containers.js.map