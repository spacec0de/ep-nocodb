"use strict";

exports.__esModule = true;
exports["default"] = exports.NoOptionsMessage = exports.MenuList = exports.LoadingMessage = void 0;

var _react = _interopRequireDefault(require("react"));

var _layout = require("@chakra-ui/layout");

var _system = require("@chakra-ui/system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Menu = function Menu(props) {
  var className = props.className,
      cx = props.cx,
      children = props.children,
      innerProps = props.innerProps,
      innerRef = props.innerRef,
      placement = props.placement,
      chakraStyles = props.selectProps.chakraStyles;
  var menuStyles = (0, _system.useMultiStyleConfig)("Menu", {});

  var initialStyles = _extends({
    position: "absolute"
  }, placement === "bottom" && {
    top: "100%"
  }, placement === "top" && {
    bottom: "100%"
  }, {
    marginY: "8px",
    width: "100%",
    zIndex: 1,
    overflow: "hidden"
  });

  var sx = chakraStyles != null && chakraStyles.menu ? chakraStyles.menu(initialStyles, props) : initialStyles;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    ref: innerRef,
    className: cx({
      menu: true
    }, className),
    sx: sx
  }), /*#__PURE__*/_react["default"].createElement(_system.StylesProvider, {
    value: menuStyles
  }, children));
};

var MenuList = function MenuList(props) {
  var className = props.className,
      cx = props.cx,
      innerRef = props.innerRef,
      children = props.children,
      maxHeight = props.maxHeight,
      isMulti = props.isMulti,
      innerProps = props.innerProps,
      _props$selectProps = props.selectProps,
      size = _props$selectProps.size,
      chakraStyles = _props$selectProps.chakraStyles;

  var _useStyles = (0, _system.useStyles)(),
      list = _useStyles.list;

  var borderRadii = (0, _system.useTheme)().radii;

  var initialStyles = _extends({}, list, {
    maxHeight: maxHeight + "px",
    overflowY: "auto",
    borderRadius: borderRadii[size]
  });

  var sx = chakraStyles != null && chakraStyles.menuList ? chakraStyles.menuList(initialStyles, props) : initialStyles;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      "menu-list": true,
      "menu-list--is-multi": isMulti
    }, className),
    sx: sx,
    ref: innerRef
  }), children);
};

exports.MenuList = MenuList;

var LoadingMessage = function LoadingMessage(props) {
  var children = props.children,
      className = props.className,
      cx = props.cx,
      innerProps = props.innerProps,
      _props$selectProps2 = props.selectProps,
      size = _props$selectProps2.size,
      placeholderColor = _props$selectProps2.placeholderColor,
      chakraStyles = _props$selectProps2.chakraStyles;
  var fontSizes = {
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem"
  };
  var paddings = {
    sm: "6px 9px",
    md: "8px 12px",
    lg: "10px 15px"
  };
  var initialStyles = {
    color: placeholderColor,
    textAlign: "center",
    padding: paddings[size],
    fontSize: fontSizes[size]
  };
  var sx = chakraStyles != null && chakraStyles.loadingMessage ? chakraStyles.loadingMessage(initialStyles, props) : initialStyles;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      "menu-notice": true,
      "menu-notice--loading": true
    }, className),
    sx: sx
  }), children);
};

exports.LoadingMessage = LoadingMessage;

var NoOptionsMessage = function NoOptionsMessage(props) {
  var children = props.children,
      className = props.className,
      cx = props.cx,
      innerProps = props.innerProps,
      _props$selectProps3 = props.selectProps,
      size = _props$selectProps3.size,
      placeholderColor = _props$selectProps3.placeholderColor,
      chakraStyles = _props$selectProps3.chakraStyles;
  var fontSizes = {
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem"
  };
  var paddings = {
    sm: "6px 9px",
    md: "8px 12px",
    lg: "10px 15px"
  };
  var initialStyles = {
    color: placeholderColor,
    textAlign: "center",
    padding: paddings[size],
    fontSize: fontSizes[size]
  };
  var sx = chakraStyles != null && chakraStyles.noOptionsMessage ? chakraStyles.noOptionsMessage(initialStyles, props) : initialStyles;
  return /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({}, innerProps, {
    className: cx({
      "menu-notice": true,
      "menu-notice--no-options": true
    }, className),
    sx: sx
  }), children);
};

exports.NoOptionsMessage = NoOptionsMessage;
var _default = Menu;
exports["default"] = _default;
//# sourceMappingURL=menu.js.map