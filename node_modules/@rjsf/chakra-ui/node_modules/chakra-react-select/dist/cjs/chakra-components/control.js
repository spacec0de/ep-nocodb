"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _layout = require("@chakra-ui/layout");

var _system = require("@chakra-ui/system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Control = function Control(props) {
  var className = props.className,
      cx = props.cx,
      children = props.children,
      innerRef = props.innerRef,
      innerProps = props.innerProps,
      isDisabled = props.isDisabled,
      isFocused = props.isFocused,
      menuIsOpen = props.menuIsOpen,
      _props$selectProps = props.selectProps,
      size = _props$selectProps.size,
      isInvalid = _props$selectProps.isInvalid,
      chakraStyles = _props$selectProps.chakraStyles,
      focusBorderColor = _props$selectProps.focusBorderColor,
      errorBorderColor = _props$selectProps.errorBorderColor;
  var inputStyles = (0, _system.useMultiStyleConfig)("Input", {
    focusBorderColor: focusBorderColor,
    errorBorderColor: errorBorderColor,
    size: size
  });
  var heights = {
    sm: 8,
    md: 10,
    lg: 12
  };

  var initialStyles = _extends({}, inputStyles.field, {
    display: "flex",
    padding: 0,
    overflow: "hidden",
    height: "auto",
    minHeight: heights[size]
  });

  var sx = chakraStyles != null && chakraStyles.control ? chakraStyles.control(initialStyles, props) : initialStyles;
  return /*#__PURE__*/_react["default"].createElement(_system.StylesProvider, {
    value: inputStyles
  }, /*#__PURE__*/_react["default"].createElement(_layout.Box, _extends({
    ref: innerRef,
    className: cx({
      control: true,
      "control--is-disabled": isDisabled,
      "control--is-focused": isFocused,
      "control--menu-is-open": menuIsOpen
    }, className),
    sx: sx
  }, innerProps, {
    "data-focus": isFocused ? true : undefined,
    "data-invalid": isInvalid ? true : undefined,
    "data-disabled": isDisabled ? true : undefined
  }), children));
};

var _default = Control;
exports["default"] = _default;
//# sourceMappingURL=control.js.map