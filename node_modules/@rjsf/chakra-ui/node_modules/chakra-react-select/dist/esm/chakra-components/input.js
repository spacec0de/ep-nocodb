var _excluded = ["innerRef", "isDisabled", "isHidden", "inputClassName"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import { Box } from "@chakra-ui/layout";
import { chakra } from "@chakra-ui/system";
import { cleanCommonProps } from "../utils";

var Input = function Input(props) {
  var className = props.className,
      cx = props.cx,
      value = props.value,
      _props$selectProps = props.selectProps,
      chakraStyles = _props$selectProps.chakraStyles,
      isReadOnly = _props$selectProps.isReadOnly,
      isRequired = _props$selectProps.isRequired;

  var _cleanCommonProps = cleanCommonProps(props),
      innerRef = _cleanCommonProps.innerRef,
      isDisabled = _cleanCommonProps.isDisabled,
      isHidden = _cleanCommonProps.isHidden,
      inputClassName = _cleanCommonProps.inputClassName,
      innerProps = _objectWithoutPropertiesLoose(_cleanCommonProps, _excluded);

  var spacingStyle = {
    gridArea: "1 / 2",
    font: "inherit",
    minW: "2px",
    border: 0,
    margin: 0,
    outline: 0
  };
  var initialContainerStyles = {
    flex: "1 1 auto",
    display: "inline-grid",
    gridArea: "1 / 1 / 2 / 3",
    gridTemplateColumns: "0 min-content",
    color: "inherit",
    _after: _extends({
      content: 'attr(data-value) " "',
      visibility: "hidden",
      whiteSpace: "pre",
      padding: 0
    }, spacingStyle)
  };
  var containerSx = chakraStyles != null && chakraStyles.inputContainer ? chakraStyles.inputContainer(initialContainerStyles, props) : initialContainerStyles;

  var initialInputStyles = _extends({
    label: "input",
    color: "inherit",
    bg: 0,
    opacity: isHidden ? 0 : 1,
    width: "100%",
    py: "0.125rem"
  }, spacingStyle);

  var inputSx = chakraStyles != null && chakraStyles.input ? chakraStyles.input(initialInputStyles, props) : initialInputStyles;
  return /*#__PURE__*/React.createElement(Box, {
    className: cx({
      "input-container": true
    }, className),
    "data-value": value || "",
    sx: containerSx
  }, /*#__PURE__*/React.createElement(chakra.input, _extends({
    className: cx({
      input: true
    }, inputClassName),
    ref: innerRef,
    sx: inputSx,
    disabled: isDisabled,
    readOnly: isReadOnly,
    "aria-readonly": isReadOnly ? true : undefined,
    "aria-required": isRequired ? true : undefined
  }, innerProps)));
};

export default Input;
//# sourceMappingURL=input.js.map