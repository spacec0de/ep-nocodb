function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from "react";
import { Box } from "@chakra-ui/layout";
import { MenuIcon } from "@chakra-ui/menu";
import { useColorModeValue, useStyles } from "@chakra-ui/system";

/**
 * The `CheckIcon` component from the Chakra UI Menu
 *
 * @see {@link https://github.com/chakra-ui/chakra-ui/blob/13c6d2e08b61e179773be4722bb81173dd599306/packages/menu/src/menu.tsx#L314}
 */
var CheckIcon = function CheckIcon(props) {
  return /*#__PURE__*/React.createElement("svg", _extends({
    viewBox: "0 0 14 14",
    width: "1em",
    height: "1em"
  }, props), /*#__PURE__*/React.createElement("polygon", {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }));
};

var Option = function Option(props) {
  var _itemStyles$_focus;

  var className = props.className,
      cx = props.cx,
      innerRef = props.innerRef,
      innerProps = props.innerProps,
      children = props.children,
      isFocused = props.isFocused,
      isDisabled = props.isDisabled,
      isSelected = props.isSelected,
      _props$selectProps = props.selectProps,
      size = _props$selectProps.size,
      isMulti = _props$selectProps.isMulti,
      hideSelectedOptions = _props$selectProps.hideSelectedOptions,
      selectedOptionStyle = _props$selectProps.selectedOptionStyle,
      selectedOptionColor = _props$selectProps.selectedOptionColor,
      chakraStyles = _props$selectProps.chakraStyles;
  var itemStyles = useStyles().item;
  var paddings = {
    sm: "0.3rem 0.6rem",
    md: "0.4rem 0.8rem",
    lg: "0.5rem 1rem"
  };
  /**
   * Use the same selected color as the border of the select component
   *
   * @see {@link https://github.com/chakra-ui/chakra-ui/blob/13c6d2e08b61e179773be4722bb81173dd599306/packages/theme/src/components/input.ts#L73}
   */

  var selectedBg = useColorModeValue(selectedOptionColor + ".500", selectedOptionColor + ".300");
  var selectedColor = useColorModeValue("white", "black"); // Don't create exta space for the checkmark if using a multi select with
  // options that dissapear when they're selected

  var showCheckIcon = selectedOptionStyle === "check" && (!isMulti || hideSelectedOptions === false);
  var shouldHighlight = selectedOptionStyle === "color" && isSelected;

  var initialStyles = _extends({}, itemStyles, {
    display: "flex",
    alignItems: "center",
    width: "100%",
    textAlign: "start",
    fontSize: size,
    padding: paddings[size],
    bg: isFocused ? (_itemStyles$_focus = itemStyles._focus) == null ? void 0 : _itemStyles$_focus.bg : "transparent"
  }, shouldHighlight && {
    bg: selectedBg,
    color: selectedColor,
    _active: {
      bg: selectedBg
    }
  }, isDisabled && itemStyles._disabled, isDisabled && {
    _active: {}
  });

  var sx = chakraStyles != null && chakraStyles.option ? chakraStyles.option(initialStyles, props) : initialStyles;
  return /*#__PURE__*/React.createElement(Box, _extends({}, innerProps, {
    role: "button",
    className: cx({
      option: true,
      "option--is-disabled": isDisabled,
      "option--is-focused": isFocused,
      "option--is-selected": isSelected
    }, className),
    sx: sx,
    ref: innerRef,
    "data-disabled": isDisabled ? true : undefined,
    "aria-disabled": isDisabled ? true : undefined
  }), showCheckIcon && /*#__PURE__*/React.createElement(MenuIcon, {
    fontSize: "0.8em",
    marginEnd: "0.75rem",
    opacity: isSelected ? 1 : 0
  }, /*#__PURE__*/React.createElement(CheckIcon, null)), children);
};

export default Option;
//# sourceMappingURL=option.js.map