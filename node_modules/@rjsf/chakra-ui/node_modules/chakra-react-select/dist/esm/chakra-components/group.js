function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from "react";
import { Box } from "@chakra-ui/layout";
import { useStyles, useTheme } from "@chakra-ui/system";

var Group = function Group(props) {
  var children = props.children,
      className = props.className,
      cx = props.cx,
      theme = props.theme,
      getStyles = props.getStyles,
      Heading = props.Heading,
      headingProps = props.headingProps,
      label = props.label,
      selectProps = props.selectProps,
      innerProps = props.innerProps,
      getClassNames = props.getClassNames;
  var chakraStyles = selectProps.chakraStyles;
  var sx = chakraStyles != null && chakraStyles.group ? chakraStyles.group({}, props) : {};
  return /*#__PURE__*/React.createElement(Box, _extends({}, innerProps, {
    className: cx({
      group: true
    }, className),
    sx: sx
  }), /*#__PURE__*/React.createElement(Heading, _extends({}, headingProps, {
    selectProps: selectProps,
    cx: cx,
    theme: theme,
    getStyles: getStyles,
    getClassNames: getClassNames
  }), label), /*#__PURE__*/React.createElement(Box, null, children));
};

var GroupHeading = function GroupHeading(props) {
  var cx = props.cx,
      className = props.className,
      children = props.children,
      _props$selectProps = props.selectProps,
      size = _props$selectProps.size,
      hasStickyGroupHeaders = _props$selectProps.hasStickyGroupHeaders,
      chakraStyles = _props$selectProps.chakraStyles;

  var _useStyles = useStyles(),
      groupTitle = _useStyles.groupTitle,
      bg = _useStyles.list.bg;

  var chakraTheme = useTheme();
  var fontSizes = {
    sm: chakraTheme.fontSizes.xs,
    md: chakraTheme.fontSizes.sm,
    lg: chakraTheme.fontSizes.md
  };
  var paddings = {
    sm: "0.4rem 0.8rem",
    md: "0.5rem 1rem",
    lg: "0.6rem 1.2rem"
  };

  var initialStyles = _extends({}, groupTitle, {
    fontSize: fontSizes[size],
    padding: paddings[size],
    margin: 0,
    borderBottomWidth: hasStickyGroupHeaders ? "1px" : 0,
    position: hasStickyGroupHeaders ? "sticky" : "static",
    top: -2,
    bg: bg,
    zIndex: 1
  });

  var sx = chakraStyles != null && chakraStyles.groupHeading ? chakraStyles.groupHeading(initialStyles, props) : initialStyles;
  return /*#__PURE__*/React.createElement(Box, {
    className: cx({
      "group-heading": true
    }, className),
    sx: sx
  }, children);
};

export { GroupHeading };
export default Group;
//# sourceMappingURL=group.js.map